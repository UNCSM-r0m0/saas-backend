#!/bin/bash

# =============================================================================
# üöÄ SCRIPT COMPLETO PARA INICIAR BACKEND + T√öNEL P√öBLICO
# =============================================================================

set -e

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo "üöÄ INICIANDO STACK COMPLETO - SAAS BACKEND"
echo "=========================================="
echo ""

# =============================================================================
# PASO 1: ACTUALIZAR Y REINICIAR BACKEND
# =============================================================================
echo -e "${BLUE}üì¶ PASO 1/4: Actualizando Backend...${NC}"
echo ""

echo -e "${YELLOW}üî® Compilando aplicaci√≥n...${NC}"
if npm run build:prod; then
    echo -e "${GREEN}‚úÖ Build exitoso${NC}"
else
    echo -e "${RED}‚ùå Error en build - abortando${NC}"
    exit 1
fi

echo ""
echo -e "${YELLOW}üîÑ Reiniciando PM2...${NC}"
# Matar procesos duplicados y reiniciar limpio
pm2 delete saas-backend 2>/dev/null || true
pm2 delete saas-api 2>/dev/null || true

if pm2 start ecosystem.config.js; then
    echo -e "${GREEN}‚úÖ PM2 iniciado correctamente${NC}"
else
    echo -e "${RED}‚ùå Error iniciando PM2${NC}"
    pm2 logs saas-backend --lines 10
    exit 1
fi

# =============================================================================
# PASO 2: VERIFICAR QUE EL BACKEND FUNCIONA
# =============================================================================
echo ""
echo -e "${BLUE}üß™ PASO 2/4: Verificando Backend...${NC}"
echo ""

echo -e "${YELLOW}‚è≥ Esperando que el backend est√© listo...${NC}"
sleep 5

# Verificar que responde
BACKEND_OK=false
for i in {1..5}; do
    if curl -f -s http://localhost:3000/api > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend respondiendo correctamente${NC}"
        BACKEND_OK=true
        break
    else
        echo -e "${YELLOW}‚è≥ Intento $i/5 - esperando...${NC}"
        sleep 2
    fi
done

if [ "$BACKEND_OK" = false ]; then
    echo -e "${RED}‚ùå Backend no responde despu√©s de 5 intentos${NC}"
    echo -e "${YELLOW}üìä Logs de PM2:${NC}"
    pm2 logs saas-backend --lines 20
    exit 1
fi

# Mostrar estado de PM2
echo ""
pm2 status

# =============================================================================
# PASO 3: CONFIGURAR T√öNEL P√öBLICO
# =============================================================================
echo ""
echo -e "${BLUE}üåê PASO 3/4: Configurando T√∫nel P√∫blico...${NC}"
echo ""

# Verificar si el t√∫nel nombrado est√° funcionando
echo -e "${YELLOW}üîç Verificando t√∫nel nombrado (api.r0lm0.dev)...${NC}"

# Verificar status del servicio cloudflared
if systemctl is-active --quiet cloudflared; then
    echo -e "${GREEN}‚úÖ Servicio cloudflared activo${NC}"
    
    # Testear si el t√∫nel nombrado funciona
    if curl -f -s https://api.r0lm0.dev/api > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ T√∫nel nombrado funcionando: https://api.r0lm0.dev${NC}"
        TUNNEL_URL="https://api.r0lm0.dev"
        TUNNEL_TYPE="nombrado"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  T√∫nel nombrado no responde, usando Quick Tunnel...${NC}"
        TUNNEL_TYPE="quick"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Servicio cloudflared inactivo, usando Quick Tunnel...${NC}"
    TUNNEL_TYPE="quick"
fi

# =============================================================================
# PASO 4: INICIAR T√öNEL (NOMBRADO O QUICK)
# =============================================================================
echo ""
echo -e "${BLUE}üîó PASO 4/4: Iniciando T√∫nel...${NC}"
echo ""

if [ "$TUNNEL_TYPE" = "nombrado" ]; then
    echo -e "${GREEN}üéâ ¬°T√öNEL NOMBRADO ACTIVO!${NC}"
    echo -e "${GREEN}üåê URL P√∫blica: $TUNNEL_URL${NC}"
    
    # Verificar configuraci√≥n del t√∫nel
    echo ""
    echo -e "${YELLOW}üìã Configuraci√≥n del t√∫nel:${NC}"
    sudo systemctl status cloudflared --no-pager | head -10
    
    echo ""
    echo -e "${BLUE}üß™ Testing endpoints:${NC}"
    echo "‚Ä¢ API: $TUNNEL_URL/api"
    echo "‚Ä¢ Swagger: $TUNNEL_URL/api/docs" 
    echo "‚Ä¢ Auth: $TUNNEL_URL/api/auth/profile"
    
else
    echo -e "${YELLOW}üöÄ Iniciando Cloudflare Quick Tunnel...${NC}"
    echo ""
    echo -e "${BLUE}üìã INFORMACI√ìN IMPORTANTE:${NC}"
    echo -e "${YELLOW}‚Ä¢ La URL aparecer√° abajo - c√≥piala para tu frontend${NC}"
    echo -e "${YELLOW}‚Ä¢ Esta URL es temporal y cambia cada vez que reinicias${NC}"
    echo -e "${YELLOW}‚Ä¢ Presiona Ctrl+C para detener el t√∫nel${NC}"
    echo ""
    
    # Matar cualquier quick tunnel existente
    pkill -f "cloudflared tunnel --url" 2>/dev/null || true
    
    # Iniciar quick tunnel
    echo -e "${GREEN}üåê Iniciando t√∫nel p√∫blico...${NC}"
    cloudflared tunnel --url http://localhost:3000
fi

# =============================================================================
# INFORMACI√ìN FINAL
# =============================================================================
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}‚úÖ STACK COMPLETAMENTE INICIADO${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

if [ "$TUNNEL_TYPE" = "nombrado" ]; then
    echo -e "${BLUE}üåê URLs P√∫blicas:${NC}"
    echo -e "${GREEN}  API: https://api.r0lm0.dev/api${NC}"
    echo -e "${GREEN}  Swagger: https://api.r0lm0.dev/api/docs${NC}"
    echo ""
    echo -e "${BLUE}üîß URLs Locales:${NC}"
    echo -e "${YELLOW}  API: http://localhost:3000/api${NC}"
    echo -e "${YELLOW}  Swagger: http://localhost:3000/api/docs${NC}"
    echo -e "${YELLOW}  Prisma Studio: http://localhost:5555${NC}"
    echo ""
    echo -e "${BLUE}üìä Comandos √∫tiles:${NC}"
    echo -e "${YELLOW}  Ver logs: pm2 logs saas-backend${NC}"
    echo -e "${YELLOW}  Restart: pm2 restart saas-backend${NC}"
    echo -e "${YELLOW}  DB Studio: npm run prisma:studio${NC}"
    echo -e "${YELLOW}  T√∫nel status: sudo systemctl status cloudflared${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Quick Tunnel iniciado - copia la URL de arriba${NC}"
fi

echo ""
